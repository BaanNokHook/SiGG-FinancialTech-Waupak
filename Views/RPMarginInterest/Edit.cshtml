@model GM.Data.Model.PaymentProcess.RPMarginInterestModel
@{
    ViewBag.Title = "Edit";

    Layout = "~/Views/Shared/MainLayout.cshtml";
    bool isUpdate = IsUpdate;
}

@using (Html.BeginForm("Edit", "RPMarginInterestModel", FormMethod.Post, new { @class = "one-col-form", id = "action-form", }))
{
    <section class="working-content">
        <div class="container-fluid container-fixed">
            <!-- PageTitle -->
            <div class="row row-fixed">
                <div class="col-lg-12 col-fixed">
                    <div class="page-title">
                        <div class="breadcrumb-wrap">
                            <ol class="breadcrumb" id="NavBar">
                                @*<li>
                                    <a href="..\Home\Index">Home</a>
                                </li>
                                <li class="active">Event Process</li>
                                <li class="active">Payment Process</li>
                                <li class="active">Repo Margin Interest</li>*@
                            </ol>
                        </div>
                        <div class="title">
                            <h1>
                                Repo Margin Interest Detail
                            </h1>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Content Zone -->
            <div class="row row-fixed">
                <div class="col-xs-12 col-fixed">
                    <div class="box-content">
                        <div class="box-header">
                            <div class="left-item">
                                <div class="title">
                                    <h3>Repo Margin Interest Detail</h3>
                                </div>
                            </div>
                        </div>
                        <div class="form-container form-horizontal form-compact">
                            <div class="row">
                                <div class="col-xs-12 form-wrapper">
                                    <div class="form-group-wrapper mb-0">
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.trans_no)
                                            @Html.LabelFor(model => model.trans_no, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">
                                                    @Model.trans_no
                                                </p>
                                            </div>
                                            @Html.HiddenFor(model => model.counter_party_code)
                                            @Html.HiddenFor(model => model.counter_party_id)
                                            @Html.LabelFor(model => model.counter_party_code, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.counter_party_code</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.asof_date)
                                            @Html.LabelFor(model => model.asof_date, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                @if (Model.asof_date != null)
                                                {
                                                    <p class="form-control-static">@Model.asof_date.Value.ToString("dd/MM/yyyy")</p>
                                                }
                                            </div>
                                            @Html.HiddenFor(model => model.trans_deal_type)
                                            @Html.LabelFor(model => model.trans_deal_type, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.trans_deal_type</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.purchase_price)
                                            @Html.LabelFor(model => model.purchase_price, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.purchase_price</p>
                                            </div>
                                            @Html.HiddenFor(model => model.cur)
                                            @Html.LabelFor(model => model.cur, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.cur</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.repo_int_rate)
                                            @Html.LabelFor(model => model.repo_int_rate, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.repo_int_rate</p>
                                            </div>
                                            @Html.HiddenFor(model => model.period)
                                            @Html.LabelFor(model => model.period, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.period</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.int_amt)
                                            @Html.LabelFor(model => model.int_amt, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.int_amt</p>
                                            </div>
                                            @Html.HiddenFor(model => model.total_int_period)
                                            @Html.LabelFor(model => model.total_int_period, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.total_int_period</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.int_tax)
                                            @Html.LabelFor(model => model.int_tax, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.int_tax</p>
                                            </div>
                                            @Html.HiddenFor(model => model.int_tax_period)
                                            @Html.LabelFor(model => model.int_tax_period, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.int_tax_period</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <hr />

                                        </div>
                                        <div class="form-group">
                                            @Html.HiddenFor(model => model.total_int_received)
                                            @Html.LabelFor(model => model.total_int_received, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.total_int_received</p>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.total_int_paid_adj, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                @Html.EditorFor(model => model.total_int_paid_adj, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 250px;", @onkeypress = "return text_OnKeyPress_NumberOnlyAndDotAndMinus(this);" } })
                                            </div>
                                            @Html.LabelFor(model => model.total_int_tax_adj, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                @Html.EditorFor(model => model.total_int_tax_adj, new { htmlAttributes = new { @class = "form-control", @onkeypress = "return text_OnKeyPress_NumberOnlyAndDotAndMinus(this);", @style = "max-width: 250px;min-width: 250px;" } })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.total_int_received_adj, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                @Html.EditorFor(model => model.total_int_received_adj, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 250px;", @onkeypress = "return text_OnKeyPress_NumberOnlyAndDotAndMinus(this);" } })
                                            </div>
                                            @Html.LabelForRequired(model => model.payment_method, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-5">
                                                <div class="input-group" style="max-width:250px;width:100%">
                                                    <div class="input-group-btn dropdown" style="max-width:125px;width:50%">
                                                        <button class="btn btn-default dropdown-toggle" style="width:100%;max-width:125px;" id="ddl_counterparty_payment" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                                            @Html.SpanFor(model => model.payment_method, "Select...", new { @class = "selected-data" })
                                                            @Html.TextBoxFor(model => model.payment_method, htmlAttributes: new { @class = "selected-value hidden" })
                                                            @Html.TextBoxFor(model => model.payment_method, htmlAttributes: new { @class = "selected-data hidden" })
                                                            <span class="caret"></span>
                                                        </button>
                                                        <div class="dropdown-menu">
                                                            <input style="display:none" type="text" data-action="@Url.Action("FillCounterPartyPayment", (string)this.ViewContext.RouteData.Values["controller"])" id="txt_counterparty_payment" class="form-control" placeholder="Search..." aria-describedby="basic-addon1">
                                                            <ul id="ul_counterparty_payment"></ul>
                                                        </div>
                                                    </div>
                                                    <div class="input-group-btn dropdown" style="max-width:125px;width:50%">
                                                        <button class="btn btn-default dropdown-toggle" style="width:100%;max-width:125px;" id="ddl_trans_mt_code" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                                            @Html.SpanFor(model => model.mt_code, "Select...", new { @class = "selected-data" })
                                                            @Html.TextBoxFor(model => model.mt_code, htmlAttributes: new { @class = "selected-value hidden" })
                                                            @Html.TextBoxFor(model => model.mt_code, htmlAttributes: new { @class = "selected-data hidden" })
                                                            <span class="caret"></span>
                                                        </button>
                                                        <div class="dropdown-menu">
                                                            <div class="search-dropdown-menu">
                                                                <input style="display:none" type="text" data-action="@Url.Action("FillMTCode", (string)this.ViewContext.RouteData.Values["controller"])" id="txt_trans_mt_code" class="form-control" placeholder="Search..." aria-describedby="basic-addon1">
                                                            </div>
                                                            <hr>
                                                            <ul id="ul_trans_mt_code"></ul>
                                                        </div>

                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-group hidden">
                                            @Html.LabelFor(model => model.accum_int_paid, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.accum_int_paid</p>
                                            </div>
                                        </div>
                                        <div class="form-group hidden">
                                            @Html.LabelFor(model => model.accum_int_reveived, htmlAttributes: new { @class = "control-label col-xs-2" })
                                            <div class="col-xs-3">
                                                <p class="form-control-static">@Model.accum_int_reveived</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="rpmargininterest-submit" class="page-button-submit text-center">
                        <button type="button" id="btnSave" class="btn btn-primary btn-round btn-big">Submit</button>
                        <button type="button" id="btnClear" class="btn btn-link">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
@section Styles {
    @Styles.Render("~/bundles/SweetAlertCss")
    @Styles.Render("~/content/datatable")
}

@section Scripts {
    @Scripts.Render("~/bundles/datatable")
    @Scripts.Render("~/bundles/SweetAlert")
    <script>
        $(document).ready(function () {

            $("#NavBar").html($('#NavRPMarginInterest').val());

              $('#btnClear').click(function (e) {
                //swal("Clear Data", "Clear Data", "success");
                 window.location.href = "\@Url.Action("Index", (string)this.ViewContext.RouteData.Values["controller"])";
            });

            $('#btnSave').click(function (e) {
                var isValid = true;
                //var text = "";
                //$("#payment_method_error").text("");

                //var payment_method = $('#payment_method');
                //if (payment_method.val().trim() == "") {
                //    text += " The Payment Methode is required.";
                //    payment_method.click();
                //}

                //var mt_code = $('#mt_code');
                //if (mt_code.val().trim() == "") {
                //    text += " The MT Code is required.";
                //    if (payment_method.val() != "") {
                //        mt_code.click();
                //    }
                //}

                //if (text != "")
                //{
                //    $("#payment_method_error").text(text);
                //    isValid = false;
                //}

                if (isValid) {
                    swal({
                        title: "Comfirm Approve?",
                        text: "",
                        type: "warning",
                        showCancelButton: true,
                        confirmButtonClass: "btn-danger",
                        confirmButtonText: "Yes",
                        cancelButtonText: "No",
                        closeOnConfirm: true,
                        closeOnCancel: true
                    },
                        function (isConfirm) {
                            if (isConfirm) {
                                GM.Message.Clear();
                                $('.spinner').css('display', 'block');
                                var dataToPost = $("#action-form").serialize();
                                $.post("Save", dataToPost)
                                    .done(function (response) {
                                        GM.Unmask();
                                        console.log(response);
                                        $('.spinner').css('display', 'none');
                                        if (response[0].Message == "") {

                                            swal({
                                                title: "Complete",
                                                text: "Saved Successfully",
                                                type: "success",
                                                showCancelButton: false,
                                                confirmButtonClass: "btn-danger",
                                                confirmButtonText: "Yes",
                                                cancelButtonText: "No",
                                                closeOnConfirm: true,
                                                closeOnCancel: true
                                            },
                                                function (isConfirm) {
                                                    if (isConfirm) {
                                                        $('.spinner').css('display', 'block');
                                                        window.location.href = "\@Url.Action("Index", (string)this.ViewContext.RouteData.Values["controller"])";
                                                    }
                                                });
                                        }
                                        else {
                                            //GM.Message.Error('.modal-body', response[0].Message);
                                            //swal("Fail", response[0].Message, "error");

                                            swal({
                                                title: "Fail",
                                                text: response[0].Message,
                                                type: "error",
                                                showCancelButton: false,
                                                confirmButtonClass: "btn-danger",
                                                confirmButtonText: "Yes",
                                                cancelButtonText: "No",
                                                closeOnConfirm: true,
                                                closeOnCancel: true
                                            },
                                                function (isConfirm) {
                                                    if (isConfirm) {
                                                        $('.spinner').css('display', 'block');
                                                        window.location.href = "\@Url.Action("Index", (string)this.ViewContext.RouteData.Values["controller"])";
                                                    }
                                                });
                                        }
                                    })
                            } else {
                                //GM.Message.Clear();
                                swal("Cancel", "", "error");
                            }
                        });
                }
            });
        });
    </script>
    @Scripts.Render("~/module/RPMarginInterestedit")
    @Scripts.RenderFormat("<script type=\"text/javascript\" src=\"{0}?nocache=" + DateTime.Now.ToString("ddmmyyyyHHmmss") + "\"></script>", "~/module/Constant")
}
